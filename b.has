/  Basic Instruction Set Horizontal Microcode    b.has

/ The label indicates the opcode decoded up to that point.
/ For example, control reaches the label L011 when opcode 
/ bits 011 have been decoded.   

/****************************************************************/
/     Fetch instruction and increment pc register                /
/****************************************************************/
fetch: mar = pc; pc = pc + 1;             / increment pc
       rd;                                / fetch mach inst
       ir = mdr;                          / put mach inst in ir
/****************************************************************/
/      Decode opcode                                             /
/****************************************************************/
       dc = ir; if(s) goto L1;            / test 1st bit
L0:    dc = left(dc); if (s) goto L01;    / test 2nd bit
L00:   dc = left(dc); if (s) goto L001;   / test 3rd bot
       goto L000;    
L1:    dc = left(dc); if (s) goto L11;    / test 2nd bit
L10:   dc = left(dc); if (s) goto L101;   / test 3rd bit
       goto L100;
L01:   dc = left(dc); if (s) goto L011;   / test 3rd bit
       goto L010;
L11:   dc = left(dc); if (s) goto L111;   / test 3rd bit
       goto L110:
/****************************************************************/
/      Microcode for each instruction                            /
/****************************************************************/
L000:  /-------------------------- LD ----------------------------
       mar = ir;                          / get add from inst      
       rd;                                / read operand
       ac = mdr; goto fetch;              / load ac with operand
L001:  /-------------------------- ST ----------------------------
       mar = ir; mdr = ac;                / prepare for write     
       wr; goto fetch;                    / write
L010:  /-------------------------- SHLL --------------------------
       f = ir & zmask; if (z) goto fetch; / get z field
lloop: ac = left(ac);                     / shift ac left   
       f = f - 1; if (z) goto fetch;      / dec ac and test   
       goto lloop;                        / branch to lloop
L011:  /-------------------------- SHRL --------------------------
       f = ir & zmask; if (z) goto fetch; / get z field
rloop: ac = right(ac);                    / shift ac right    
       f = f - 1; if (z) goto fetch;      / dec ac and test   
       goto rloop;                        / branch to rloop
L100:  /-------------------------- ADDC --------------------------
       f = ir & xmask;                    / get const from x field
       ac = ac + f; goto fetch;           / add const to ac
L101:  /-------------------------- FLIP --------------------------
       ac = ~ac; goto fetch               / bitwise compl ac
L110:  /-------------------------- MULT --------------------------
       mar = ir;                          / get add from inst      
       rd;                                / read operand
       ac = ac * mdr; goto fetch;         / mult ac by operand
L111:  /-------------------------- JN ----------------------------
       0 = ac; if (s) goto dojn;          / branch if ac neg
       goto fetch;                        / branch
dojn:  pc = ir & xmask; goto fetch;       / put new add in pc
